#How would you convert seconds into time?
SELECT SEC_TO_TIME(3665) AS formatted_time;


#How would you display the number of weekends in the current month
 WITH RECURSIVE dates AS (
  SELECT CURDATE() - INTERVAL DAY(CURDATE()) - 1 DAY AS dt
  UNION ALL
  SELECT dt + INTERVAL 1 DAY
  FROM dates
  WHERE dt + INTERVAL 1 DAY <= LAST_DAY(CURDATE())
)
SELECT COUNT(*) AS weekend_days
FROM dates
WHERE DAYOFWEEK(dt) IN (1, 7);


#Write a MySQL query to find the name (first_name, last name), department ID and name of all the employees.
SELECT 
    E.FIRST_NAME,
    E.LAST_NAME,
    E.DEPARTMENT_ID,
    D.DEPARTMENT_NAME
FROM 
    EMPLOYEES E
JOIN 
    DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;


#Write a MySQL query to find the employee ID, job title, number of days between ending date and starting date for all jobs in department 90 from job history.
SELECT 
    jh.employee_id,
    j.job_title,
    DATEDIFF(jh.end_date, jh.start_date) AS duration_days
FROM 
    job_history jh
JOIN 
    jobs j ON jh.job_id = j.job_id
WHERE 
    jh.department_id = 90;


#Write a MySQL query to find the name (first_name, last_name) and the salary of the employees who have a higher salary than the employee whose last_name='Bull'.
select first_name, last_name, salary
from employees
where salary>(select salary
from employees
where last_name='Bull');


#Write a MySQL query to find the name (first_name, last_name) of all employees who works in the IT department.
select e.first_name, e.last_name
from employees e
join departments d on e.department_id = d.department_id
where d.department_name = 'IT';



#Write a MySQL query to find the name (first_name, last_name) of the employees who have a manager and worked in a USA based department.
SELECT first_name, last_name
FROM employees
WHERE department_id IN (
      SELECT department_id
      FROM departments
      WHERE location_id IN (
          SELECT location_id
          FROM locations
          WHERE country_id = 'USA'
      )
  );


#Write a MySQL query to find the addresses (location_id, street_address, city, state_province, country_name) of all the departments.
SELECT 
    l.location_id,
    l.street_address,
    l.city,
    l.state_province,
    c.country_name
FROM 
    locations l
JOIN 
    countries c ON l.country_id = c.country_id;Output


#Write a MySQL query to use EXPLAIN to analyze the performance of a SELECT query retrieving all orders placed after a specific date from the Orders table.
EXPLAIN
SELECT *
FROM Orders
WHERE order_date > '2023-01-01';


#Suppose you have a table with order details and write a query to fetch all the orders done last 7 days.
SELECT *
FROM OrderDetails
WHERE order_date >= CURDATE() - INTERVAL 7 DAY;


#Customers With No Orders in Last 3 Months
SELECT c.customer_id, c.customer_name
FROM Customers c
LEFT JOIN Orders o
  ON c.customer_id = o.customer_id
  AND o.order_date >= CURDATE() - INTERVAL 3 MONTH
WHERE o.order_id IS NULL;




CREATE TABLE locations (
    location_id INT PRIMARY KEY,
    street_address VARCHAR(100),
    postal_code VARCHAR(20),
    city VARCHAR(50),
    state_province VARCHAR(50),
    country_id CHAR(2)
);




INSERT INTO locations (location_id, street_address, postal_code, city, state_province, country_id) VALUES
(1000, '1297 Via Cola di Rie', '989', 'Roma', NULL, 'IT'),
(1100, '93091 Calle della Te', '10934', 'Venice', NULL, 'IT'),
(1200, '2017 Shinjuku-ku', '1689', 'Tokyo', 'Tokyo Prefectu', 'JP'),
(1300, '9450 Kamiya-cho', '6823', 'Hiroshima', NULL, 'JP'),
(1400, '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US');



#Find customers who placed orders in the last 30 days
SELECT DISTINCT c.customer_id, c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;


#Which 5 products generated the highest total revenue
SELECT p.product_id, p.product_name, SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_revenue DESC
LIMIT 5;


 Find customers who have never placed an order
sql
Copy
Edit
SELECT c.customer_id, c.customer_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;


#List products where stock is below 10
SELECT product_id, product_name, stock_quantity
FROM products
WHERE stock_quantity < 10;



#What is the average order value for each customer
SELECT c.customer_id, c.customer_name, 
       AVG(o.total_amount) AS avg_order_value
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name;
If there's no total_amount column in orders, calculate it from order_items.

#Calculate total sales for each day in the past week
SELECT o.order_date, 
       SUM(oi.quantity * oi.unit_price) AS total_sales
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
WHERE o.order_date >= CURDATE() - INTERVAL 7 DAY
GROUP BY o.order_date
ORDER BY o.order_date;


#Who are the top 3 customers by number of orders
SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS order_count
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY order_count DESC
LIMIT 3;


#Show how many times each product was sold
SELECT p.product_id, p.product_name, SUM(oi.quantity) AS times_sold
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY times_sold DESC;



#Total revenue grouped by product category
SELECT cat.category_id, cat.category_name, 
       SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN categories cat ON p.category_id = cat.category_id
GROUP BY cat.category_id, cat.category_name
ORDER BY total_revenue DESC;



#Which customers haven't ordered in the last 6 months
SELECT c.customer_id, c.customer_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id 
                     AND o.order_date >= CURDATE() - INTERVAL 6 MONTH
WHERE o.order_id IS NULL;


 


